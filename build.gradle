import org.ajoberstar.grgit.*
import org.apache.tools.ant.filters.*

buildscript {
	ext {
		springBootVersion = '1.3.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('org.ajoberstar:gradle-git:1.4.0-rc.1')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

jar {
	baseName = 'network-monitor'
	version = '0.0.1-SNAPSHOT'
}
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

clean {
	delete "activemq-data"
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter")
	compile("org.springframework:spring-jms")
	compile("org.apache.activemq:activemq-broker")
	compile("org.springframework.boot:spring-boot-actuator")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-remote-shell")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}


afterEvaluate {
	configure(allProcessResourcesTasks()) {
		filter(ReplaceTokens,
			tokens: [baseName: project.jar.baseName,
				version: project.jar.version,
				gradleVersion: project.gradle.gradleVersion]
		)
	}
}



def allProcessResourcesTasks() {
	sourceSets*.processResourcesTaskName.collect {
		tasks[it]
	}
}


configure(rootProject) {
	task gitMetadata << {
		ext {
			repo = Grgit.open(project.file('.'))
			branch = repo.branch?.current?.name
			commitId = repo.head().abbreviatedId
			commitTime = new Date(new Integer(repo.head().time)
				.longValue()*1000L).format("yyyy-MM-dd HH:mm")
		}
	}
	apply from: 'writeGitPropertiesFile.gradle'
}
